{"version":3,"sources":["components/nav.js","components/billContainer.js","pages/Bills.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","id","to","window","location","pathname","role","aria-haspopup","aria-labelledby","List","children","BillC","Bills","state","axios","get","then","res","console","log","Component","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAsDeA,MAnDf,WACI,OACI,yBAAKC,UAAU,+CACX,4BAAQA,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAChFC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACxE,0BAAMN,UAAU,yBAEpB,uBAAGA,UAAU,eAAeO,KAAK,MAAjC,kBACA,yBAAKP,UAAU,2BAA2BQ,GAAG,0BACzC,wBAAIR,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMS,GAAG,IAAIT,UAAwC,MAA7BU,OAAOC,SAASC,SAAmB,kBAAoB,YAA/E,SAIJ,wBAAIZ,UAAU,YACV,kBAAC,IAAD,CACIS,GAAG,UACHT,UAAwC,YAA7BU,OAAOC,SAASC,SAAyB,kBAAoB,YAF5E,WAOJ,wBAAIZ,UAAU,YACV,kBAAC,IAAD,CACIS,GAAG,SACHT,UAAwC,WAA7BU,OAAOC,SAASC,SAAwB,kBAAoB,YAF3E,oBAQR,wBAAIZ,UAAU,cACV,wBAAIA,UAAU,qBACV,uBAAGA,UAAU,2BAA2BO,KAAK,KAAKC,GAAG,iBAAiBK,KAAK,SACvEX,cAAY,WAAWY,gBAAc,OAAOT,gBAAc,SAD9D,gBAIA,yBAAKL,UAAU,gBAAgBe,kBAAgB,kBAC3C,uBAAGf,UAAU,gBAAgBO,KAAK,MAAlC,UACA,uBAAGP,UAAU,gBAAgBO,KAAK,MAAlC,WACA,yBAAKP,UAAU,qBACf,uBAAGA,UAAU,gBAAgBO,KAAK,MAAlC,iB,iBC3CrB,SAASS,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SACnB,OACI,yBAAKjB,UAAU,2BACX,wBAAIA,UAAU,cACTiB,IAKV,SAASC,EAAT,GAA8B,IAAbD,EAAY,EAAZA,SACpB,OACI,wBAAIjB,UAAU,mBAAmBiB,GCRlC,IAsBQE,EAtBf,2MACIC,MAAQ,CACJ,QAAW,oBACX,MAAS,IAHjB,mFAMQC,IAAMC,IAAI,qBAAqBC,KAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAN/D,+BAUQ,OACI,6BACI,kBAACR,EAAD,KACI,kBAACE,EAAD,YAbpB,GAA2BS,aCeZC,E,iLAZX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWZ,W,GAPhCQ,aCMEK,QACW,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.19196ea3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark navbar-expand-md\">\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\r\n                aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <a className=\"navbar-brand\" href=\"./\">For the People</a>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/\" className={window.location.pathname === \"/\" ? \"nav-link active\" : \"nav-link\"}>\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link\r\n                            to=\"/Papers\"\r\n                            className={window.location.pathname === \"/Papers\" ? \"nav-link active\" : \"nav-link\"}\r\n                        >\r\n                            Papers\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link\r\n                            to=\"/Bills\"\r\n                            className={window.location.pathname === \"/Bills\" ? \"nav-link active\" : \"nav-link\"}\r\n                        >\r\n                            Upcoming Bills\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item dropdown\">\r\n                        <a className=\"nav-link dropdown-toggle\" href=\"./\" id=\"navbarDropdown\" role=\"button\"\r\n                            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            User Account\r\n                        </a>\r\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                            <a className=\"dropdown-item\" href=\"./\">Log In</a>\r\n                            <a className=\"dropdown-item\" href=\"./\">Sign Up</a>\r\n                            <div className=\"dropdown-divider\"></div>\r\n                            <a className=\"dropdown-item\" href=\"./\">Log Out</a>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\nexport function List({ children }) {\r\n    return (\r\n        <div className=\"list-overflow-container\">\r\n            <ul className=\"list-group\">\r\n                {children}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport function BillC({ children }) {\r\n    return (\r\n        <li className=\"list-group-item\">{children}</li>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport axios from \"axios\";\r\nimport { List, BillC } from \"../components/billContainer\"\r\n\r\n\r\nexport class Bills extends Component {\r\n    state = {\r\n        \"chamber\": \"/api/getUpcomingS\",\r\n        \"bills\": []\r\n    }\r\n    componentDidMount() {\r\n        axios.get(\"/api/getUpcomingS\").then(res => console.log(res))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <List>\r\n                    <BillC>\r\n\r\n                    </BillC>\r\n                </List>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bills\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Nav from \"./components/nav\"\nimport Bills from \"./pages/Bills\"\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/Bills\" component={Bills} />\n          </Switch>\n        </div >\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}